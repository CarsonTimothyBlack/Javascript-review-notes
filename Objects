1. Vocabulary
  --'Properties' = Variables in an object
  --'Methods' = Functions in an object
  --'Key' = Name of property
  -- 'this' = a keyword found in functions that refers to one object only. If used in Global scope, will refer to window object by default.
              If used in Local scope, will refer to object that function lies within (See part 2 & 3 below for example)
  -- 'new' = a keyword that aids in creating new objects using constructor notation
  
2. Object literal
  --structure--
    var hotel = {
      name: 'Quay',             (These are key/value 'properties')
      rooms: 40,
      booked: 25,
      gym: true,
      
      roomTypes: ['twin', 'double', 'suite'],       (This is an array within an object)
      
      checkAvailability: function() {               (This is a 'method' which is a function within an object)
        return this.rooms - this.booked;
      }
    };
    
  --creating empty objects--
    var hotel = {}; (creates an empty object)     OR    var hotel = new Object();  (constructor notation)
    
  --adding, updating, and deleting properties/methods to objects--
    ADD -- hotel.name = 'Quay';    (Structure is objectName.Key = Value. If Key does not exist, then it will be added to object)
    UPDATE -- hotel.name = 'Park';  (If Key already exists, this will update the value of key. In this case, will change 'Quay' to 'Park')
    DELETE -- delete hotel.name;  (Will delete 'name' key from object)
    BLANK -- hotel.name = '';   (Will either add 'name' key to object with blank value, or replace existing 'name' key with blank value)
    
  --accessing--
    var hotelName = hotel.name; (This variable is given the value of 'Quay', by using this structure to access: object.property/method name.
                                  This '.' is called a member operator)
    var roomsFree = hotel.checkAvailability();  (This variable will run the method in the hotel object)
    
  --alternate access--
    var hotelName = hotel['name'];
    var roomsFree = hotel['checkAvailability]();
    
3. Constructor Functions
  --structure--
    function Hotel(name, rooms, booked) {
      this.name = name;
      this.rooms = rooms;
      this.booked = booked;
      this.checkAvailability = function() {
        return this. rooms - this. booked;
      };
    }
    
  --creating multiple objects from constructor function--
  var QuayHotel = new Hotel(Quay, 40, 25);    (The structure is var varName = new functionCall(arguments that refer to function parameters))
  var ParkHotel = new Hotel(Park, 75, 30);
  var PoopHotel = new Hotel(Poop, 2, 1);    (You can create several similar objects this way)

4. Arrays in an object
  --structure--
    var hotel = {
      room1:[420,40,10],
      room2:[460,20,20],
      room3:[230,0,0],
    };
    
  --accessing--
    hotel.room1[0];   (returns 420)
    
5. Objects in an array
  --structure--
    var hotel = [
      {accom: 420, food: 40, phone: 10},
      {accom: 460, food: 20, phone: 20},
      {accom: 230, food: 0, phone: 0}
    ];
    
  --accessing--
    hotel[2].phone    (returns 0)
    hotel[0].accom    (returns 420)
